{
  "definition": "FCFS (First-Come, First-Served) is the simplest type of CPU scheduling algorithm. It executes processes in the order in which they arrive in the ready queue without preemption. It is analogous to a FIFO (First-In, First-Out) queue.",
  "working": {
    "description": "In FCFS, the operating system maintains a queue of all ready processes. The CPU picks the process at the front of the queue and begins execution. Once a process starts, it runs to completion before moving to the next one. This simplicity comes with potential drawbacks like the convoy effect, where short processes wait behind long ones.",
    "example": {
      "processTable": {
        "headers": ["Process", "Arrival Time (ms)", "Burst Time (ms)"],
        "rows": [
          ["P1", "0", "5"],
          ["P2", "1", "3"],
          ["P3", "2", "8"]
        ]
      },
      "ganttChartImage": "/images/fcfs_gantt_chart.png",
      "queueDiagramImage": "/images/fcfs_queue.png"
    }
  },
  "characteristics": [
    {
      "feature": "Type",
      "description": "Non-preemptive scheduling"
    },
    {
      "feature": "Strategy",
      "description": "First-come, first-served (FIFO)"
    },
    {
      "feature": "Throughput",
      "description": "Moderate; can suffer when long jobs block the queue"
    },
    {
      "feature": "Turnaround Time",
      "description": "Can vary greatly depending on process order"
    },
    {
      "feature": "Waiting Time",
      "description": "Can be long for processes arriving after long ones"
    }
  ],
  "performance_issues": {
    "title": "Convoy Effect",
    "description": "A major drawback of FCFS is the convoy effect, where a long process holds the CPU while many shorter processes wait. This leads to poor CPU and I/O utilization."
  },
  "complexity": {
    "time": "O(n^2) — due to sorting and iteration in some implementations.",
    "space": "O(n) — for storing process-related data like burst and arrival times."
  },
  "advantages": [
    "Simple and easy to implement.",
    "Fair in the sense that requests are handled in order of arrival.",
    "No starvation — every process eventually executes."
  ],
  "disadvantages": [
    "Non-preemptive: a long process can delay others.",
    "Poor average turnaround and waiting time if long processes arrive early.",
    "Not suitable for time-sharing systems."
  ],
  "resources": [
    {
      "title": "GeeksforGeeks - FCFS Scheduling",
      "url": "https://www.geeksforgeeks.org/fcfs-scheduling-processes/"
    },
    {
      "title": "YouTube - FCFS Scheduling Explained with Example",
      "url": "https://www.youtube.com/watch?v=dh3CM5fTV9I"
    }
  ]
}
